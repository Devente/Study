string:
```
new String('');

1.返回指定位置的字符
str.charAt(接受数字)

2.返回指定某个具体字符的 Unicode 编码
str.charCodeAt(下标)

3.将两个或多个字符的文本组合起来，返回一个新的字符串
str.concat()

4.返回字符串中一个子串第一处出现的索引（从左到右搜索）。如果没有匹配项，返回 -1  ; 
第一个参数是需要检索的字符串
第二个参数是字符串中那个位置开始检索
str.indexOf()
str.lastIndexOf()
应用：
保证每次新搜索都是从上一个子字符串的后面开始
while(pos>-1){
	pos = str.indexOf('s',pos+1)
}

5.返回字符串的一个子串，传入参数是起始位置和结束位置,含头不含尾
str.substring(起始位置,结束位置)

6.提取字符串的一部分，并返回一个新字符串（与 substring 相同）。  
str.slice()

7.返回字符串的一个子串，传入参数是起始位置和长度  
str.substr(起始位置,长度)

负值的情况：
{
	slice：传入的负值与字符串的长度相加
	substr：负值第一个参数与字符串的长度相加，负值第二个参数转为0
	substring：所有的负值转为0  唯一：str.substring(3,0)  可以转化 str .substring(0,3);
}


8.创建一个字符串副本，删除前后位置的所有空格，返回结果
str.trim()

9.大小写转换
str.toLowerCase()
str.toUpperCase()


10.执行一个正则表达式匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回 -1 。  
str.search(regexp)

11.用来查找匹配一个正则表达式的字符串，然后使用新字符串代替匹配的字符串。  
str.replace(regexp,function(){})
第一个参数：Regexp | 字符串( 字符串不会被转换成正则表达式 ) ，只会替换第一个子字符串
第二个参数：函数 | 字符串， 可以使用一些特殊字符序列，将正则表达式操作得到的值插入到结果字符串中

捕获项：

特殊字符序列：
-----------------------------------------------------------------
字符序列  替换文本
$$         $
$&         匹配整个模式的子字符串。与Regexp.lastMatch的值相同
$'         匹配的子字符串 之前的 子字符串。与Regexp.leftContext的值相同
$`         匹配的子字符串 之后的 子字符串。与Regexp.rightContext的值相同
$n         匹配第n个捕获组的子字符串(n为0-9) 
		   例如，$1是匹配第一个捕获组的子字符串，$2是匹配第一个捕获组的子字符串...
		   如果正则表达式中没有定义捕获组，则使用空字符串
$nn        匹配第nn个捕获组的子字符串(n为01-99) 
           例如，$01是匹配第一个捕获组的子字符串，$02是匹配第一个捕获组的子字符串...
           如果正则表达式中没有定义捕获组，则使用空字符串
-----------------------------------------------------------------
var str = 'cat, bat, sat, fat';
result = str.replace( /(.at)/g, 'word ($1)' );

函数：
* 在只有一个匹配项(即与模式匹配的字符串)的情况下 ， 会向函数传递三个参数：模式的匹配项、模式匹配项在字符串中的位置、原始字符串
* 在正则表达式中定义了多个捕获组的情况下,会向函数传递的参数：
模式的匹配项、第一个捕获组的匹配项、第二个捕获组的匹配项....、模式匹配项在字符串中的位置、原始字符串
* 函数应该返回一个字符串，表示应该被替换的匹配项
var ms = str.replace( /[<>"&]/g, function(m,p,s){
	switch (m){
		case '<':
			return '>';
		case '>':
			return '<';
		case '\"':
			return  '`';
	}
} );


12.检查一个字符串匹配一个正则表达式内容，如果么有匹配返回 null,返回字符串数组
str.match(Regexp)  等同于  Regexp.exec(str)
数组第一项是与整个模式匹配的字符串
之后的每一项(如果有) 保存着与正则表达式中的捕获组匹配的字符串


13.通过将字符串划分成子串，将一个字符串做成一个字符串数组。  
str.split()
第一个参数：Regexp | 字符串
第二个参数：指定数组返回的大小


```
